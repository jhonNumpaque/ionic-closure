/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";

const import0 = require('./home');
const import1 = require('@angular/core/src/linker/view');
const import3 = require('@angular/core/src/linker/view_utils');
const import4 = require('@angular/core/src/metadata/view');
const import5 = require('@angular/core/src/linker/view_type');
const import6 = require('@angular/core/src/change_detection/change_detection');
const import7 = require('@angular/core/src/linker/component_factory');
const import8 = require('ionic-angular/navigation/nav-controller');
const import9 = require('../../../node_modules/ionic-angular/components/toolbar/toolbar.ngfactory');
const import10 = require('ionic-angular/components/navbar/navbar');
const import11 = require('../../../node_modules/ionic-angular/components/navbar/navbar.ngfactory');
const import12 = require('ionic-angular/components/toolbar/toolbar-title');
const import13 = require('../../../node_modules/ionic-angular/components/toolbar/toolbar-title.ngfactory');
const import14 = require('ionic-angular/components/content/content');
const import15 = require('../../../node_modules/ionic-angular/components/content/content.ngfactory');
const import16 = require('ionic-angular/components/button/button');
const import17 = require('../../../node_modules/ionic-angular/components/button/button.ngfactory');
const import18 = require('ionic-angular/config/config');
const import19 = require('@angular/core/src/linker/element_ref');
const import20 = require('ionic-angular/navigation/view-controller');
const import21 = require('ionic-angular/components/app/app');
const import22 = require('ionic-angular/components/toolbar/toolbar');
const import23 = require('ionic-angular/platform/platform');
const import24 = require('ionic-angular/platform/dom-controller');
const import25 = require('ionic-angular/platform/keyboard');
const import26 = require('@angular/core/src/zone/ng_zone');
const import27 = require('ionic-angular/components/tabs/tabs');
class Wrapper_HomePage {
    constructor(p0) {
        this._changed = false;
        this.context = new import0.HomePage(p0);
    }
    ngOnDetach(view, componentView, el) {}
    ngOnDestroy() {}
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {}
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
exports.Wrapper_HomePage = Wrapper_HomePage;
var renderType_HomePage_Host = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, [], {});
class View_HomePage_Host0 extends import1.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_HomePage_Host0, renderType_HomePage_Host, import5.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'page-home', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_HomePage0(this.viewUtils, this, 0, this._el_0);
        this._HomePage_0_3 = new Wrapper_HomePage(this.injectorGet(import8.NavController, this.parentIndex));
        this.compView_0.create(this._HomePage_0_3.context);
        this.init(this._el_0, this.renderer.directRenderer ? null : [this._el_0], null);
        return new import7.ComponentRef_(0, this, this._el_0, this._HomePage_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (token === import0.HomePage && 0 === requestNodeIndex) {
            return this._HomePage_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HomePage_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
exports.HomePageNgFactory = new import7.ComponentFactory('page-home', View_HomePage_Host0, import0.HomePage);
const styles_HomePage = [];
var renderType_HomePage = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, styles_HomePage, {});
class View_HomePage0 extends import1.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_HomePage0, renderType_HomePage, import5.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'ion-header', import3.EMPTY_INLINE_ARRAY, null);
        this._Header_1_3 = new import9.Wrapper_Header(this.parentView.injectorGet(import18.Config, this.parentIndex), new import19.ElementRef(this._el_1), this.renderer, this.parentView.injectorGet(import20.ViewController, this.parentIndex, null));
        this._text_2 = this.renderer.createText(this._el_1, '\n    ', null);
        this._el_3 = import3.createRenderElement(this.renderer, this._el_1, 'ion-navbar', new import3.InlineArray2(2, 'class', 'toolbar'), null);
        this.compView_3 = new import11.View_Navbar0(this.viewUtils, this, 3, this._el_3);
        this._Navbar_3_3 = new import11.Wrapper_Navbar(this.parentView.injectorGet(import21.App, this.parentIndex), this.parentView.injectorGet(import20.ViewController, this.parentIndex, null), this.parentView.injectorGet(import8.NavController, this.parentIndex, null), this.parentView.injectorGet(import18.Config, this.parentIndex), new import19.ElementRef(this._el_3), this.renderer);
        this._text_4 = this.renderer.createText(null, '\n      ', null);
        this._el_5 = import3.createRenderElement(this.renderer, null, 'ion-title', import3.EMPTY_INLINE_ARRAY, null);
        this.compView_5 = new import13.View_ToolbarTitle0(this.viewUtils, this, 5, this._el_5);
        this._ToolbarTitle_5_3 = new import13.Wrapper_ToolbarTitle(this.parentView.injectorGet(import18.Config, this.parentIndex), new import19.ElementRef(this._el_5), this.renderer, this.parentView.injectorGet(import22.Toolbar, this.parentIndex, null), this._Navbar_3_3.context);
        this._text_6 = this.renderer.createText(null, '\n        Ionic Blank\n      ', null);
        this.compView_5.create(this._ToolbarTitle_5_3.context);
        this._text_7 = this.renderer.createText(null, '\n    ', null);
        this.compView_3.create(this._Navbar_3_3.context);
        this._text_8 = this.renderer.createText(this._el_1, '\n  ', null);
        this._text_9 = this.renderer.createText(parentRenderNode, '\n\n  ', null);
        this._el_10 = import3.createRenderElement(this.renderer, parentRenderNode, 'ion-content', new import3.InlineArray2(2, 'padding', ''), null);
        this.compView_10 = new import15.View_Content0(this.viewUtils, this, 10, this._el_10);
        this._Content_10_3 = new import15.Wrapper_Content(this.parentView.injectorGet(import18.Config, this.parentIndex), this.parentView.injectorGet(import23.Platform, this.parentIndex), this.parentView.injectorGet(import24.DomController, this.parentIndex), new import19.ElementRef(this._el_10), this.renderer, this.parentView.injectorGet(import21.App, this.parentIndex), this.parentView.injectorGet(import25.Keyboard, this.parentIndex), this.parentView.injectorGet(import26.NgZone, this.parentIndex), this.parentView.injectorGet(import20.ViewController, this.parentIndex, null), this.parentView.injectorGet(import27.Tabs, this.parentIndex, null));
        this._text_11 = this.renderer.createText(null, '\n    The world is your oyster.\n    ', null);
        this._el_12 = import3.createRenderElement(this.renderer, null, 'p', import3.EMPTY_INLINE_ARRAY, null);
        this._text_13 = this.renderer.createText(this._el_12, '\n      If you get lost, the ', null);
        this._el_14 = import3.createRenderElement(this.renderer, this._el_12, 'a', new import3.InlineArray2(2, 'href', 'http://ionicframework.com/docs/v2'), null);
        this._text_15 = this.renderer.createText(this._el_14, 'docs', null);
        this._text_16 = this.renderer.createText(this._el_12, ' will be your guide.\n    ', null);
        this._text_17 = this.renderer.createText(null, '\n    ', null);
        this._el_18 = import3.createRenderElement(this.renderer, null, 'button', new import3.InlineArray2(2, 'ion-button', ''), null);
        this.compView_18 = new import17.View_Button0(this.viewUtils, this, 18, this._el_18);
        this._Button_18_3 = new import17.Wrapper_Button('', this.parentView.injectorGet(import18.Config, this.parentIndex), new import19.ElementRef(this._el_18), this.renderer);
        this._text_19 = this.renderer.createText(null, 'Next Page', null);
        this.compView_18.create(this._Button_18_3.context);
        this._text_20 = this.renderer.createText(null, '\n  ', null);
        this.compView_10.create(this._Content_10_3.context);
        this._text_21 = this.renderer.createText(parentRenderNode, '\n  ', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_18, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_18));
        this.init(null, this.renderer.directRenderer ? null : [this._text_0, this._el_1, this._text_2, this._el_3, this._text_4, this._el_5, this._text_6, this._text_7, this._text_8, this._text_9, this._el_10, this._text_11, this._el_12, this._text_13, this._el_14, this._text_15, this._text_16, this._text_17, this._el_18, this._text_19, this._text_20, this._text_21], [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (token === import12.ToolbarTitle && 5 <= requestNodeIndex && requestNodeIndex <= 6) {
            return this._ToolbarTitle_5_3.context;
        }
        if (token === import10.Navbar && 3 <= requestNodeIndex && requestNodeIndex <= 7) {
            return this._Navbar_3_3.context;
        }
        if (token === import22.Header && 1 <= requestNodeIndex && requestNodeIndex <= 8) {
            return this._Header_1_3.context;
        }
        if (token === import16.Button && 18 <= requestNodeIndex && requestNodeIndex <= 19) {
            return this._Button_18_3.context;
        }
        if (token === import14.Content && 10 <= requestNodeIndex && requestNodeIndex <= 20) {
            return this._Content_10_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._Header_1_3.ngDoCheck(this, this._el_1, throwOnChange);
        this._Navbar_3_3.ngDoCheck(this, this._el_3, throwOnChange);
        if (this._ToolbarTitle_5_3.ngDoCheck(this, this._el_5, throwOnChange)) {
            this.compView_5.markAsCheckOnce();
        }
        if (this._Content_10_3.ngDoCheck(this, this._el_10, throwOnChange)) {
            this.compView_10.markAsCheckOnce();
        }
        if (this._Button_18_3.ngDoCheck(this, this._el_18, throwOnChange)) {
            this.compView_18.markAsCheckOnce();
        }
        if (!throwOnChange) {
            if (this.numberOfChecks === 0) {
                this._Button_18_3.context.ngAfterContentInit();
            }
        }
        this._Navbar_3_3.checkHost(this, this.compView_3, this._el_3, throwOnChange);
        this._Content_10_3.checkHost(this, this.compView_10, this._el_10, throwOnChange);
        this.compView_3.detectChanges(throwOnChange);
        this.compView_5.detectChanges(throwOnChange);
        this.compView_10.detectChanges(throwOnChange);
        this.compView_18.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_3.destroy();
        this.compView_5.destroy();
        this.compView_10.destroy();
        this.compView_18.destroy();
        this._Content_10_3.ngOnDestroy();
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (nodeIndex == 3 && ngContentIndex == 0) {}
        if (nodeIndex == 3 && ngContentIndex == 1) {}
        if (nodeIndex == 3 && ngContentIndex == 2) {}
        if (nodeIndex == 3 && ngContentIndex == 3) {
            cb(this._text_4, ctx);
            cb(this._el_5, ctx);
            cb(this._text_7, ctx);
        }
        if (nodeIndex == 5 && ngContentIndex == 0) {
            cb(this._text_6, ctx);
        }
        if (nodeIndex == 10 && ngContentIndex == 0) {}
        if (nodeIndex == 10 && ngContentIndex == 1) {
            cb(this._text_11, ctx);
            cb(this._el_12, ctx);
            cb(this._text_17, ctx);
            cb(this._el_18, ctx);
            cb(this._text_20, ctx);
        }
        if (nodeIndex == 10 && ngContentIndex == 2) {}
        if (nodeIndex == 18 && ngContentIndex == 0) {
            cb(this._text_19, ctx);
        }
    }
    handleEvent_18(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if (eventName == 'click') {
            const pd_sub_0 = this.context.nextPage() !== false;
            result = pd_sub_0 && result;
        }
        return result;
    }
}
exports.View_HomePage0 = View_HomePage0;
//# sourceMappingURL=data:application/json;base64,