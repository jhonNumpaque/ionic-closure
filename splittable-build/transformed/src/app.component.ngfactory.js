/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";

const import0 = require('./app.component');
const import1 = require('@angular/core/src/linker/view');
const import3 = require('@angular/core/src/linker/view_utils');
const import4 = require('@angular/core/src/metadata/view');
const import5 = require('@angular/core/src/linker/view_type');
const import6 = require('@angular/core/src/change_detection/change_detection');
const import7 = require('@angular/core/src/linker/component_factory');
const import8 = require('ionic-angular/platform/platform');
const import9 = require('ionic-angular/components/nav/nav');
const import10 = require('../node_modules/ionic-angular/components/nav/nav.ngfactory');
const import11 = require('ionic-angular/navigation/view-controller');
const import12 = require('ionic-angular/navigation/nav-controller');
const import13 = require('ionic-angular/components/app/app');
const import14 = require('ionic-angular/config/config');
const import15 = require('ionic-angular/platform/keyboard');
const import16 = require('@angular/core/src/linker/element_ref');
const import17 = require('@angular/core/src/zone/ng_zone');
const import18 = require('@angular/core/src/linker/component_factory_resolver');
const import19 = require('ionic-angular/gestures/gesture-controller');
const import20 = require('ionic-angular/transitions/transition-controller');
const import21 = require('ionic-angular/navigation/deep-linker');
const import22 = require('ionic-angular/platform/dom-controller');
class Wrapper_MyApp {
    constructor(p0) {
        this._changed = false;
        this.context = new import0.MyApp(p0);
    }
    ngOnDetach(view, componentView, el) {}
    ngOnDestroy() {}
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {}
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
exports.Wrapper_MyApp = Wrapper_MyApp;
var renderType_MyApp_Host = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, [], {});
class View_MyApp_Host0 extends import1.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MyApp_Host0, renderType_MyApp_Host, import5.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ng-component', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_MyApp0(this.viewUtils, this, 0, this._el_0);
        this._MyApp_0_3 = new Wrapper_MyApp(this.injectorGet(import8.Platform, this.parentIndex));
        this.compView_0.create(this._MyApp_0_3.context);
        this.init(this._el_0, this.renderer.directRenderer ? null : [this._el_0], null);
        return new import7.ComponentRef_(0, this, this._el_0, this._MyApp_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (token === import0.MyApp && 0 === requestNodeIndex) {
            return this._MyApp_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._MyApp_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
exports.MyAppNgFactory = new import7.ComponentFactory('ng-component', View_MyApp_Host0, import0.MyApp);
const styles_MyApp = [];
var renderType_MyApp = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, styles_MyApp, {});
class View_MyApp0 extends import1.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_MyApp0, renderType_MyApp, import5.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'ion-nav', import3.EMPTY_INLINE_ARRAY, null);
        this.compView_1 = new import10.View_Nav0(this.viewUtils, this, 1, this._el_1);
        this._Nav_1_3 = new import10.Wrapper_Nav(this.parentView.injectorGet(import11.ViewController, this.parentIndex, null), this.parentView.injectorGet(import12.NavController, this.parentIndex, null), this.parentView.injectorGet(import13.App, this.parentIndex), this.parentView.injectorGet(import14.Config, this.parentIndex), this.parentView.injectorGet(import8.Platform, this.parentIndex), this.parentView.injectorGet(import15.Keyboard, this.parentIndex), new import16.ElementRef(this._el_1), this.parentView.injectorGet(import17.NgZone, this.parentIndex), this.renderer, this.parentView.injectorGet(import18.ComponentFactoryResolver, this.parentIndex), this.parentView.injectorGet(import19.GestureController, this.parentIndex), this.parentView.injectorGet(import20.TransitionController, this.parentIndex), this.parentView.injectorGet(import21.DeepLinker, this.parentIndex, null), this.parentView.injectorGet(import22.DomController, this.parentIndex));
        this.compView_1.create(this._Nav_1_3.context);
        this._text_2 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this.init(null, this.renderer.directRenderer ? null : [this._text_0, this._el_1, this._text_2], null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (token === import9.Nav && 1 === requestNodeIndex) {
            return this._Nav_1_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_1_0_0 = this.context.rootPage;
        this._Nav_1_3.check_root(currVal_1_0_0, throwOnChange, false);
        this._Nav_1_3.ngDoCheck(this, this._el_1, throwOnChange);
        this.compView_1.detectChanges(throwOnChange);
        if (!throwOnChange) {
            if (this.numberOfChecks === 0) {
                this._Nav_1_3.context.ngAfterViewInit();
            }
        }
    }
    destroyInternal() {
        this.compView_1.destroy();
    }
}
exports.View_MyApp0 = View_MyApp0;
//# sourceMappingURL=data:application/json;base64,